import 'package:freezed_annotation/freezed_annotation.dart';
import 'SelectableNavigationRoute.dart';

part 'route_dto.freezed.dart';
part 'route_dto.g.dart';

/// Data Transfer Object for Route API responses from the backend
///
/// **Primary Purpose:** Represents a complete route entity as returned by the API.
/// This is the read-only representation used for displaying route information.
///
/// **API Mapping:** Maps exactly to `Routeplanner_API.DTO.Route.RouteDto` in your C# backend
///
/// **Usage Scenarios:**
/// - Displaying route lists in UI (saved routes, search results)
/// - Showing detailed route information
/// - Converting API responses to domain objects
/// - Caching route data locally
///
/// **Data Flow:**
/// ```
/// API Response â†’ RouteDto.fromJson() â†’ UI Components
/// ```
///
/// **Example API Response:**
/// ```json
/// {
///   "routeId": "123e4567-e89b-12d3-a456-426614174000",
///   "name": "Morning Jog Route",
///   "description": "A scenic 5km route through Kralingse Bos",
///   "createdBy": "456e7890-e89b-12d3-a456-426614174001",
///   "isPrivate": false,
///   "createdAt": "2025-05-27T08:30:00Z",
///   "updatedAt": "2025-05-27T08:30:00Z"
/// }
/// ```
///
/// **Security Considerations:**
/// - Contains user IDs - ensure proper authorization before displaying
/// - Private routes should only be visible to creators
/// - Timestamps are in UTC from backend
@freezed
abstract class RouteDto with _$RouteDto {
  const factory RouteDto({
    /// Unique identifier for the route
    ///
    /// **Type Mapping:** C# `Guid RouteId` â†’ Dart `String`
    /// **Format:** UUID v4 string (36 characters with hyphens)
    /// **Usage:** Primary key for all route operations (GET, PUT, DELETE)
    ///
    /// **Examples:**
    /// - `"123e4567-e89b-12d3-a456-426614174000"`
    /// - Used in API endpoints: `/api/routes/{routeId}`
    ///
    /// **Implementation Notes:**
    /// - Generated by backend on creation
    /// - Immutable throughout route lifecycle
    /// - Used for deep linking: `/routes/{routeId}`
    required String routeId,

    /// Human-readable name of the route
    ///
    /// **Type Mapping:** C# `string Name` â†’ Dart `String`
    /// **Constraints:** 1-255 characters (enforced by backend)
    /// **Usage:** Primary display text in UI lists and headers
    ///
    /// **Examples:**
    /// - `"Morning Jog Route"`
    /// - `"Historic Rotterdam City Center"`
    /// - `"Weekend Cycling Adventure"`
    ///
    /// **UI Considerations:**
    /// - Truncate with ellipsis for long names in list views
    /// - Use as page title in route detail views
    /// - Primary text for search functionality
    required String name,

    /// Optional detailed description of the route
    ///
    /// **Type Mapping:** C# `string? Description` â†’ Dart `String?`
    /// **Content:** Free-form text describing route highlights, difficulty, duration
    /// **Usage:** Secondary information in detail views and route cards
    ///
    /// **Examples:**
    /// - `"A peaceful 5km route along the Maas river with beautiful city views"`
    /// - `"Challenging 10km route through Kralingse Bos with hill climbs"`
    /// - `null` (no description provided)
    ///
    /// **UI Considerations:**
    /// - Show placeholder text when null: "No description available"
    /// - Support markdown formatting in future versions
    /// - Expandable text in list views for long descriptions
    String? description,

    /// Identifier of the user who created this route
    ///
    /// **Type Mapping:** C# `Guid? CreatedBy` â†’ Dart `String?`
    /// **Format:** UUID v4 string matching User entity ID
    /// **Usage:** Attribution, ownership validation, user profile linking
    ///
    /// **Security:**
    /// - Used to determine edit/delete permissions
    /// - Required for privacy enforcement (private routes)
    /// - Links to user profile for "Created by" attribution
    ///
    /// **Implementation:**
    /// - `null` indicates system-generated or anonymous routes
    /// - Cross-reference with authentication context for permissions
    /// - Used in queries: "Show my routes" filtering
    String? createdBy,

    /// Privacy setting determining route visibility
    ///
    /// **Type Mapping:** C# `bool? IsPrivate` â†’ Dart `bool?`
    /// **Default:** `true` (private by default for user privacy)
    /// **Usage:** Controls route discoverability and access permissions
    ///
    /// **Behavior:**
    /// - `true`: Only creator can view/edit (private routes)
    /// - `false`: Publicly discoverable (community routes)
    /// - `null`: Legacy data or system routes
    ///
    /// **UI Implications:**
    /// - Show privacy icon (lock/globe) in route lists
    /// - Filter public routes in community/discover sections
    /// - Warn users when making routes public
    bool? isPrivate,

    /// Timestamp when the route was originally created
    ///
    /// **Type Mapping:** C# `DateTime? CreatedAt` â†’ Dart `DateTime?`
    /// **Format:** UTC timestamp from backend
    /// **Usage:** Sorting, filtering, and "Created on" display
    ///
    /// **Display Examples:**
    /// - List sorting: "Newest first" / "Oldest first"
    /// - Detail view: "Created on May 27, 2025"
    /// - Relative time: "Created 2 hours ago"
    ///
    /// **Implementation:**
    /// - Always in UTC from backend
    /// - Convert to local time for display
    /// - Use for data freshness indicators
    DateTime? createdAt,

    /// Timestamp when the route was last modified
    ///
    /// **Type Mapping:** C# `DateTime? UpdatedAt` â†’ Dart `DateTime?`
    /// **Format:** UTC timestamp from backend
    /// **Usage:** Change tracking, sync indicators, "Last updated" display
    ///
    /// **Business Logic:**
    /// - Updated on any route modification (name, description, locations)
    /// - Used for conflict resolution in offline scenarios
    /// - Triggers cache invalidation in clients
    ///
    /// **UI Applications:**
    /// - Show "Recently updated" badges
    /// - Sort by last activity
    /// - Display modification history context
    DateTime? updatedAt,
  }) = _RouteDto;

  /// Creates RouteDto from JSON API response
  ///
  /// **API Integration:** Deserializes route data from ASP.NET Core backend
  /// **Error Handling:** Throws `FormatException` for malformed JSON
  ///
  /// **Supported Sources:**
  /// - GET `/api/routes/{id}` - Single route details
  /// - GET `/api/routes` - Route listing with pagination
  /// - POST `/api/routes` - Newly created route response
  /// - PUT `/api/routes/{id}` - Updated route response
  ///
  /// **Example Usage:**
  /// ```dart
  /// // From HTTP response
  /// final response = await http.get('/api/routes/123');
  /// final route = RouteDto.fromJson(json.decode(response.body));
  ///
  /// // From cached data
  /// final cachedJson = await storage.getRoute(routeId);
  /// final route = RouteDto.fromJson(cachedJson);
  /// ```
  ///
  /// **JSON Schema Validation:**
  /// - `routeId`: Required string (UUID format)
  /// - `name`: Required string (non-empty)
  /// - `description`: Optional string or null
  /// - `createdBy`: Optional string (UUID format) or null
  /// - `isPrivate`: Optional boolean or null
  /// - `createdAt`: Optional ISO 8601 datetime or null
  /// - `updatedAt`: Optional ISO 8601 datetime or null
  factory RouteDto.fromJson(Map<String, dynamic> json) =>
      _$RouteDtoFromJson(json);
}

/// Extension methods for RouteDto providing additional functionality and convenience methods
///
/// These methods enhance the basic DTO with computed properties and utility functions
/// commonly needed in the application layer.
extension RouteDtoExtensions on RouteDto {
  /// Checks if the current user is the owner of this route
  ///
  /// **Purpose:** Permission validation for edit/delete operations
  /// **Usage:** UI state management, button visibility, action authorization
  ///
  /// **Parameters:**
  /// - `userId`: The current authenticated user's ID (from auth context)
  ///
  /// **Returns:** `true` if user owns the route, `false` otherwise
  ///
  /// **Security Note:** Always validate permissions server-side as well
  ///
  /// **Example:**
  /// ```dart
  /// final canEdit = route.isOwnedBy(currentUser.id);
  /// if (canEdit) {
  ///   showEditButton();
  /// }
  /// ```
  bool isOwnedBy(String? userId) {
    return userId != null && createdBy == userId;
  }

  /// Determines if the route is accessible to the current user
  ///
  /// **Logic:**
  /// - Public routes (`isPrivate == false`) are accessible to everyone
  /// - Private routes are only accessible to their creators
  /// - Routes with null privacy setting default to accessible (legacy data)
  ///
  /// **Usage:** Filtering route lists, controlling route visibility
  ///
  /// **Example:**
  /// ```dart
  /// final visibleRoutes = allRoutes
  ///   .where((route) => route.isAccessibleTo(currentUser.id))
  ///   .toList();
  /// ```
  bool isAccessibleTo(String? userId) {
    if (isPrivate == false) return true; // Public route
    if (isPrivate == null) return true; // Legacy/system route
    return isOwnedBy(userId); // Private route - owner only
  }

  /// Converts full RouteDto to lightweight SelectableNavigationRoute
  ///
  /// **Purpose:** Transform detailed route data for selection UI components
  /// **Usage:** Populating dropdowns, pickers, and selection lists
  ///
  /// **Enhancements Applied:**
  /// - Adds privacy indicator to display name for private routes
  /// - Provides fallback description for routes without descriptions
  /// - Optimizes data for UI performance
  ///
  /// **Example:**
  /// ```dart
  /// final selectableRoutes = fullRoutes
  ///   .map((route) => route.toSelectableRoute())
  ///   .toList();
  /// ```
  SelectableNavigationRoute toSelectableRoute() {
    final privacyPrefix = (isPrivate == true) ? "ðŸ”’ " : "";
    final displayName = "$privacyPrefix$name";
    final fallbackDescription = description ?? "No description available";

    return SelectableNavigationRoute(
      id: routeId,
      displayName: displayName,
      description: fallbackDescription,
    );
  }

  /// Gets a user-friendly formatted creation date
  ///
  /// **Purpose:** Display creation timestamp in localized, readable format
  /// **Usage:** Route cards, detail views, "Created on" labels
  ///
  /// **Formatting:**
  /// - Returns relative time for recent routes ("2 hours ago")
  /// - Returns absolute date for older routes ("May 27, 2025")
  /// - Handles null creation dates gracefully
  ///
  /// **Example:**
  /// ```dart
  /// Text("Created ${route.getFormattedCreationDate()}")
  /// ```
  String getFormattedCreationDate() {
    if (createdAt == null) return "Unknown";

    final now = DateTime.now();
    final difference = now.difference(createdAt!);

    if (difference.inDays < 1) {
      if (difference.inHours < 1) {
        return "${difference.inMinutes} minutes ago";
      }
      return "${difference.inHours} hours ago";
    } else if (difference.inDays < 7) {
      return "${difference.inDays} days ago";
    } else {
      // Format as absolute date for older routes
      return "${createdAt!.day}/${createdAt!.month}/${createdAt!.year}";
    }
  }

  /// Checks if the route has been recently updated
  ///
  /// **Purpose:** UI indicators for freshly modified content
  /// **Logic:** Route is "recent" if updated within the last 24 hours
  /// **Usage:** "New" badges, highlighting recently changed routes
  ///
  /// **Example:**
  /// ```dart
  /// if (route.isRecentlyUpdated()) {
  ///   showNewBadge();
  /// }
  /// ```
  bool isRecentlyUpdated() {
    if (updatedAt == null) return false;
    final twentyFourHoursAgo = DateTime.now().subtract(const Duration(days: 1));
    return updatedAt!.isAfter(twentyFourHoursAgo);
  }

  /// Generates a summary string for quick route identification
  ///
  /// **Purpose:** Compact route representation for logs, search, debugging
  /// **Format:** "RouteName (ID: first-8-chars) - Privacy: Public/Private"
  /// **Usage:** Logging, debugging, compact displays
  ///
  /// **Example Output:**
  /// ```
  /// "Morning Jog Route (ID: 123e4567) - Privacy: Private"
  /// ```
  String getSummary() {
    final privacyText = isPrivate == true ? "Private" : "Public";
    final shortId = routeId.length > 8 ? routeId.substring(0, 8) : routeId;
    return "$name (ID: $shortId) - Privacy: $privacyText";
  }

  /// Creates a deep link URL for this route
  ///
  /// **Purpose:** Generate shareable links for route pages
  /// **Usage:** Share functionality, bookmarking, navigation
  /// **Format:** `/routes/{routeId}` - compatible with app routing
  ///
  /// **Security:** Only generate links for public routes or owned routes
  ///
  /// **Example:**
  /// ```dart
  /// final shareUrl = route.getDeepLink();
  /// Share.share("Check out this route: $shareUrl");
  /// ```
  String getDeepLink() {
    return "/routes/$routeId";
  }
}
