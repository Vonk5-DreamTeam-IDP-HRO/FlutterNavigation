import 'package:freezed_annotation/freezed_annotation.dart';

part 'create_location_dto.freezed.dart';
part 'create_location_dto.g.dart';

/// Data Transfer Object for creating new locations via API
///
/// Maps to the C# CreateLocationDto in your ASP.NET Core API.
/// Used for POST requests to create locations in the Rotterdam area.
///
/// **Validation Rules:**
/// - Name: Required, max 255 characters
/// - Coordinates: Must be within Rotterdam area bounds
/// - Description: Optional, no length limit enforced at DTO level
/// - LocationDetail: Optional nested details
///
/// **Example usage:**
/// ```dart
/// final dto = CreateLocationDto(
///   name: 'Rotterdam Central Station',
///   latitude: 51.9244,
///   longitude: 4.4777,
///   description: 'Main railway station',
/// );
/// ```
@freezed
abstract class CreateLocationDto with _$CreateLocationDto {
  const factory CreateLocationDto({
    /// Location name (maps to C# string Name)
    /// Must be non-empty and max 255 characters
    required String name,

    /// Latitude coordinate (maps to C# double Latitude)
    /// Must be between 51.80 and 52.00 for Rotterdam area
    required double latitude,

    /// Longitude coordinate (maps to C# double Longitude)
    /// Must be between 4.40 and 4.60 for Rotterdam area
    required double longitude,

    /// Optional description (maps to C# string? Description)
    String? description,

    /// Optional location details (maps to C# CreateLocationDetailDto? LocationDetail)
    CreateLocationDetailDto? locationDetail,
  }) = _CreateLocationDto;

  /// Creates CreateLocationDto from JSON
  /// Auto-generated by Freezed for API request serialization
  factory CreateLocationDto.fromJson(Map<String, dynamic> json) =>
      _$CreateLocationDtoFromJson(json);
}

/// Custom validation extension for CreateLocationDto
///
/// Provides business rule validation for location creation.
/// These rules ensure data quality and consistency with Rotterdam area constraints.
///
/// **Usage:**
/// ```dart
/// final dto = CreateLocationDto(...);
/// if (!dto.isValid()) {
///   print('Name error: ${dto.validateName()}');
///   print('Latitude error: ${dto.validateLatitude()}');
/// }
/// ```
extension CreateLocationDtoValidation on CreateLocationDto {
  /// Validates location name field
  /// Returns null if valid, error message if invalid
  String? validateName() {
    if (name.isEmpty) return 'Name is required';
    if (name.length > 255) return 'Name must be 255 characters or less';
    return null;
  }

  /// Validates latitude coordinate for Rotterdam area
  /// Returns null if valid, error message if invalid
  String? validateLatitude() {
    if (latitude < 51.80 || latitude > 52.00) {
      return 'Latitude must be between 51.80 and 52.00 (Rotterdam area)';
    }
    return null;
  }

  /// Validates longitude coordinate for Rotterdam area
  /// Returns null if valid, error message if invalid
  String? validateLongitude() {
    if (longitude < 4.40 || longitude > 4.60) {
      return 'Longitude must be between 4.40 and 4.60 (Rotterdam area)';
    }
    return null;
  }

  /// Checks if all validation rules pass
  /// Returns true if the DTO is valid for API submission
  bool isValid() {
    return validateName() == null &&
        validateLatitude() == null &&
        validateLongitude() == null;
  }
}

/// Data Transfer Object for creating location details via API
///
/// Maps to the C# CreateLocationDetailDto in your ASP.NET Core API.
/// Contains optional supplementary information for a location.
///
/// **Field Constraints (matching C# backend):**
/// - Address: max 255 characters
/// - City: max 100 characters
/// - Country: max 100 characters
/// - ZipCode: max 20 characters
/// - PhoneNumber: max 20 characters + format validation
/// - Website: max 2048 characters + URL format validation
/// - Category: max 100 characters
/// - Accessibility: max 500 characters
///
/// **Example usage:**
/// ```dart
/// final detail = CreateLocationDetailDto(
///   address: 'Stationsplein 9',
///   city: 'Rotterdam',
///   country: 'Netherlands',
///   zipCode: '3013 AK',
///   phoneNumber: '+31 88 123 4567',
///   website: 'https://example.com',
/// );
/// ```
@freezed
abstract class CreateLocationDetailDto with _$CreateLocationDetailDto {
  const factory CreateLocationDetailDto({
    /// Street address (maps to C# string? Address)
    /// Max 255 characters as per C# backend constraint
    String? address,

    /// City name (maps to C# string? City)
    /// Max 100 characters as per C# backend constraint
    String? city,

    /// Country name (maps to C# string? Country)
    /// Max 100 characters as per C# backend constraint
    String? country,

    /// Postal/ZIP code (maps to C# string? ZipCode)
    /// Max 20 characters as per C# backend constraint
    String? zipCode,

    /// Contact phone number (maps to C# string? PhoneNumber)
    /// Max 20 characters with format validation as per C# backend
    String? phoneNumber,

    /// Website URL (maps to C# string? Website)
    /// Max 2048 characters with URL format validation as per C# backend
    String? website,

    /// Location category/type (maps to C# string? Category)
    /// Max 100 characters as per C# backend constraint
    String? category,

    /// Accessibility information (maps to C# string? Accessibility)
    /// Max 500 characters as per C# backend constraint
    String? accessibility,
  }) = _CreateLocationDetailDto;

  /// Creates CreateLocationDetailDto from JSON
  /// Auto-generated by Freezed for API request serialization
  factory CreateLocationDetailDto.fromJson(Map<String, dynamic> json) =>
      _$CreateLocationDetailDtoFromJson(json);
}

/// Custom validation extension for CreateLocationDetailDto
///
/// Provides comprehensive validation for all location detail fields.
/// Validation rules match the C# backend constraints exactly to prevent API errors.
///
/// **Phone number validation:** Basic international format check
/// **Website validation:** Must be valid HTTP/HTTPS URL
/// **Length validation:** All fields checked against C# backend limits
///
/// **Usage:**
/// ```dart
/// final detail = CreateLocationDetailDto(...);
/// if (!detail.isValid()) {
///   detail.getValidationErrors().forEach(print);
/// }
/// ```
extension CreateLocationDetailDtoValidation on CreateLocationDetailDto {
  /// Validates street address field length
  String? validateAddress() {
    if (address != null && address!.length > 255) {
      return 'Address must be 255 characters or less';
    }
    return null;
  }

  /// Validates city field length
  String? validateCity() {
    if (city != null && city!.length > 100) {
      return 'City must be 100 characters or less';
    }
    return null;
  }

  /// Validates country field length
  String? validateCountry() {
    if (country != null && country!.length > 100) {
      return 'Country must be 100 characters or less';
    }
    return null;
  }

  /// Validates ZIP/postal code field length
  String? validateZipCode() {
    if (zipCode != null && zipCode!.length > 20) {
      return 'Zip code must be 20 characters or less';
    }
    return null;
  }

  /// Validates phone number format and length
  /// Accepts international format with basic validation
  String? validatePhoneNumber() {
    if (phoneNumber != null) {
      if (phoneNumber!.length > 20) {
        return 'Phone number must be 20 characters or less';
      }
      // Basic phone validation - international format with common separators
      final phoneRegex = RegExp(r'^\+?[0-9\s\-\(\)]+$');
      if (!phoneRegex.hasMatch(phoneNumber!)) {
        return 'Invalid phone number format';
      }
    }
    return null;
  }

  /// Validates website URL format and length
  /// Must be valid HTTP/HTTPS URL
  String? validateWebsite() {
    if (website != null) {
      if (website!.length > 2048) {
        return 'Website URL must be 2048 characters or less';
      }
      // Basic URL validation - must start with http:// or https://
      final urlRegex = RegExp(r'^https?://[^\s]+$');
      if (!urlRegex.hasMatch(website!)) {
        return 'Invalid website URL format';
      }
    }
    return null;
  }

  /// Validates category field length
  String? validateCategory() {
    if (category != null && category!.length > 100) {
      return 'Category must be 100 characters or less';
    }
    return null;
  }

  /// Validates accessibility field length
  String? validateAccessibility() {
    if (accessibility != null && accessibility!.length > 500) {
      return 'Accessibility must be 500 characters or less';
    }
    return null;
  }

  /// Checks if all validation rules pass
  /// Returns true if the DTO is valid for API submission
  bool isValid() {
    return validateAddress() == null &&
        validateCity() == null &&
        validateCountry() == null &&
        validateZipCode() == null &&
        validatePhoneNumber() == null &&
        validateWebsite() == null &&
        validateCategory() == null &&
        validateAccessibility() == null;
  }
}
