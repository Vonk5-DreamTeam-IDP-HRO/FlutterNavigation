import 'package:freezed_annotation/freezed_annotation.dart';

part 'update_location_dto.freezed.dart';
part 'update_location_dto.g.dart';

/// Data Transfer Object for updating existing locations via API
///
/// Maps to the C# UpdateLocationDto in your ASP.NET Core API.
/// Used for PUT/PATCH requests to modify existing locations.
///
/// **Key Differences from CreateLocationDto:**
/// - No locationId field (passed in URL path)
/// - May contain partial data for PATCH operations
/// - Validation rules mirror create operations
///
/// **Validation Rules:**
/// - Name: Required, max 100 characters (different from create)
/// - Coordinates: Must be within Rotterdam area bounds
/// - Description: Optional, max 500 characters
/// - LocationDetail: Optional nested details with own validation
///
/// **Example usage:**
/// ```dart
/// final dto = UpdateLocationDto(
///   name: 'Updated Station Name',
///   latitude: 51.9244,
///   longitude: 4.4777,
///   description: 'Updated description',
/// );
/// ```
@freezed
abstract class UpdateLocationDto with _$UpdateLocationDto {
  const factory UpdateLocationDto({
    /// Location name (maps to C# string Name)
    /// Must be non-empty and max 100 characters
    required String name,

    /// Latitude coordinate (maps to C# double Latitude)
    /// Must be between 51.80 and 52.00 for Rotterdam area
    required double latitude,

    /// Longitude coordinate (maps to C# double Longitude)
    /// Must be between 4.40 and 4.60 for Rotterdam area
    required double longitude,

    /// Optional description (maps to C# string? Description)
    /// Max 500 characters
    String? description,

    /// Optional location details (maps to C# UpdateLocationDetailDto? LocationDetail)
    UpdateLocationDetailDto? locationDetail,
  }) = _UpdateLocationDto;

  /// Creates UpdateLocationDto from JSON
  /// Auto-generated by Freezed for API request serialization
  factory UpdateLocationDto.fromJson(Map<String, Object?> json) =>
      _$UpdateLocationDtoFromJson(json);
}

/// Data Transfer Object for updating location details via API
///
/// Maps to the C# UpdateLocationDetailDto in your ASP.NET Core API.
/// Contains optional supplementary information for location updates.
///
/// **Field Constraints (optimized for updates):**
/// - Address: max 200 characters (stricter than create)
/// - City: max 100 characters
/// - Country: max 100 characters
/// - ZipCode: max 20 characters
/// - PhoneNumber: max length + Dutch format validation
/// - Website: valid URL format validation
/// - Category: max 50 characters (stricter than create)
/// - Accessibility: max 200 characters (stricter than create)
///
/// **Example usage:**
/// ```dart
/// final detail = UpdateLocationDetailDto(
///   address: 'New address',
///   phoneNumber: '+31 88 765 4321',
///   website: 'https://newwebsite.com',
/// );
/// ```
@freezed
abstract class UpdateLocationDetailDto with _$UpdateLocationDetailDto {
  const factory UpdateLocationDetailDto({
    /// Street address (maps to C# string? Address)
    /// Max 200 characters for update operations
    String? address,

    /// City name (maps to C# string? City)
    /// Max 100 characters
    String? city,

    /// Country name (maps to C# string? Country)
    /// Max 100 characters
    String? country,

    /// Postal/ZIP code (maps to C# string? ZipCode)
    /// Max 20 characters
    String? zipCode,

    /// Contact phone number (maps to C# string? PhoneNumber)
    /// Dutch format validation applied
    String? phoneNumber,

    /// Website URL (maps to C# string? Website)
    /// Must be valid HTTP/HTTPS URL
    String? website,

    /// Location category/type (maps to C# string? Category)
    /// Max 50 characters for update operations
    String? category,

    /// Accessibility information (maps to C# string? Accessibility)
    /// Max 200 characters for update operations
    String? accessibility,
  }) = _UpdateLocationDetailDto;

  /// Creates UpdateLocationDetailDto from JSON
  /// Auto-generated by Freezed for API request serialization
  factory UpdateLocationDetailDto.fromJson(Map<String, Object?> json) =>
      _$UpdateLocationDetailDtoFromJson(json);
}

/// Custom validation extension for UpdateLocationDto
///
/// Provides business rule validation for location updates.
/// Rules are tailored for update operations with some differences from create validation.
///
/// **Key Validation Rules:**
/// - Name: 1-100 characters (stricter than create)
/// - Coordinates: Rotterdam area bounds (51.80-52.00, 4.40-4.60)
/// - Description: max 500 characters
/// - Nested locationDetail validation
///
/// **Usage:**
/// ```dart
/// final dto = UpdateLocationDto(...);
/// if (!dto.isValid) {
///   dto.validationErrors.forEach(print);
/// }
/// ```
extension UpdateLocationDtoValidation on UpdateLocationDto {
  /// Checks if all validation rules pass
  /// Returns true if the DTO is valid for API submission
  bool get isValid {
    return isNameValid &&
        areCoordinatesValid &&
        isDescriptionValid &&
        (locationDetail?.isValid ?? true);
  }

  /// Validates name field length and content
  /// Must be non-empty and within character limit
  bool get isNameValid => name.trim().isNotEmpty && name.length <= 100;

  /// Validates coordinates are within Rotterdam area bounds
  /// Ensures location stays within supported geographic region
  bool get areCoordinatesValid {
    // Rotterdam area validation
    return latitude >= 51.80 &&
        latitude <= 52.00 &&
        longitude >= 4.40 &&
        longitude <= 4.60;
  }

  /// Validates description field length
  /// Allows null or up to 500 characters
  bool get isDescriptionValid =>
      description == null || description!.length <= 500;

  /// Gets list of all validation errors
  /// Returns empty list if validation passes
  List<String> get validationErrors {
    final List<String> errors = [];

    if (!isNameValid) {
      errors.add('Name must be between 1 and 100 characters');
    }

    if (!areCoordinatesValid) {
      errors.add('Coordinates must be within Rotterdam area');
    }

    if (!isDescriptionValid) {
      errors.add('Description must be 500 characters or less');
    }

    if (locationDetail != null && !locationDetail!.isValid) {
      errors.addAll(locationDetail!.validationErrors);
    }

    return errors;
  }
}

/// Custom validation extension for UpdateLocationDetailDto
///
/// Provides comprehensive validation for location detail updates.
/// Rules are optimized for update operations with stricter limits than create.
///
/// **Key Differences from Create Validation:**
/// - Address: 200 char limit (vs 255 for create)
/// - Category: 50 char limit (vs 100 for create)
/// - Accessibility: 200 char limit (vs 500 for create)
/// - Phone: Dutch format validation
/// - Website: HTTP/HTTPS URL validation
///
/// **Usage:**
/// ```dart
/// final detail = UpdateLocationDetailDto(...);
/// if (!detail.isValid) {
///   detail.validationErrors.forEach(print);
/// }
/// ```
extension UpdateLocationDetailDtoValidation on UpdateLocationDetailDto {
  /// Checks if all validation rules pass
  /// Returns true if the DTO is valid for API submission
  bool get isValid {
    return isAddressValid &&
        isCityValid &&
        isCountryValid &&
        isZipCodeValid &&
        isPhoneNumberValid &&
        isWebsiteValid &&
        isCategoryValid &&
        isAccessibilityValid;
  }

  /// Validates address field length (stricter for updates)
  bool get isAddressValid => address == null || address!.length <= 200;

  /// Validates city field length
  bool get isCityValid => city == null || city!.length <= 100;

  /// Validates country field length
  bool get isCountryValid => country == null || country!.length <= 100;

  /// Validates ZIP code field length
  bool get isZipCodeValid => zipCode == null || zipCode!.length <= 20;

  /// Validates phone number using Dutch format
  /// Accepts various Dutch phone number formats
  bool get isPhoneNumberValid {
    if (phoneNumber == null) return true;
    // Dutch phone number format - more flexible than create validation
    final phoneRegex = RegExp(r'^(\+31|0031|0)[1-9][0-9]{8}$');
    return phoneRegex.hasMatch(phoneNumber!.replaceAll(RegExp(r'[\s\-]'), ''));
  }

  /// Validates website URL format
  /// Must be valid HTTP or HTTPS URL
  bool get isWebsiteValid {
    if (website == null) return true;
    final urlRegex = RegExp(r'^https?:\/\/.+\..+');
    return urlRegex.hasMatch(website!);
  }

  /// Validates category field length (stricter for updates)
  bool get isCategoryValid => category == null || category!.length <= 50;

  /// Validates accessibility field length (stricter for updates)
  bool get isAccessibilityValid =>
      accessibility == null || accessibility!.length <= 200;

  /// Gets list of all validation errors
  /// Returns empty list if validation passes
  List<String> get validationErrors {
    final List<String> errors = [];

    if (!isAddressValid) {
      errors.add('Address must be 200 characters or less');
    }
    if (!isCityValid) {
      errors.add('City must be 100 characters or less');
    }
    if (!isCountryValid) {
      errors.add('Country must be 100 characters or less');
    }
    if (!isZipCodeValid) {
      errors.add('Zip code must be 20 characters or less');
    }
    if (!isPhoneNumberValid) {
      errors.add('Phone number must be a valid Dutch number');
    }
    if (!isWebsiteValid) {
      errors.add(
        'Website must be a valid URL starting with http:// or https://',
      );
    }
    if (!isCategoryValid) {
      errors.add('Category must be 50 characters or less');
    }
    if (!isAccessibilityValid) {
      errors.add('Accessibility must be 200 characters or less');
    }

    return errors;
  }
}
